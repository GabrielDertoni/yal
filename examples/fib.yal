; include 'examples/lib.yal'

(let 'letfn (fn '(name args body)
                '(let name (fn args body))))

(letfn 'empty '(lst)
       '(if (= lst '()) 't 'f))

(letfn 'fst '(a b) 'a)
(letfn 'snd '(a b) 'b)

(letfn 'do '(lst)
       '(if (empty (cdr lst))
          '(eval (car lst))
          '(snd (eval (car lst)) (do (cdr lst)))))

(letfn 'cond '(conditions)
       '(if (empty conditions)
          'nil
          '(do '((let 'branch (car conditions))
                 (let 'condition (car branch))
                 (let 'expr (car (cdr branch)))
                 (if (eval condition)
                   '(eval expr)
                   '(cond (cdr conditions))
                   )))))

(letfn 'println '(thing)
       '(do '((print thing)
              (print "\n")
              )))

(letfn 'fib '(n)
       '(cond '(
                ((= n 0) 1)
                ((= n 1) 1)
                (t (+ (fib (- n 1)) (fib (- n 2)))))))

; Suuuper slow, but it works!
(println (fib 20))

